#include <stdio.h>
#include <obliv.oh>

#include "sha256.h"

#define uchar unsigned char
#define uint unsigned int
#define ouchar obliv unsigned char
#define ouint obliv unsigned int

#define DBL_INT_ADD(a,b,c) if (a > 0xffffffff - (c)) ++b; a += c;
#define ROTLEFT(a,b) (((a) << (b)) | ((a) >> (32-(b))))
#define ROTRIGHT(a,b) (((a) >> (b)) | ((a) << (32-(b))))

#define CH(x,y,z) (((x) & (y)) ^ (~(x) & (z)))
#define MAJ(x,y,z) (((x) & (y)) ^ ((x) & (z)) ^ ((y) & (z)))
#define EP0(x) (ROTRIGHT(x,2) ^ ROTRIGHT(x,13) ^ ROTRIGHT(x,22))
#define EP1(x) (ROTRIGHT(x,6) ^ ROTRIGHT(x,11) ^ ROTRIGHT(x,25))
#define SIG0(x) (ROTRIGHT(x,7) ^ ROTRIGHT(x,18) ^ ((x) >> 3))
#define SIG1(x) (ROTRIGHT(x,17) ^ ROTRIGHT(x,19) ^ ((x) >> 10))

uint k[64] = {
    0x428a2f98,0x71374491,0xb5c0fbcf,0xe9b5dba5,0x3956c25b,0x59f111f1,0x923f82a4,0xab1c5ed5,
    0xd807aa98,0x12835b01,0x243185be,0x550c7dc3,0x72be5d74,0x80deb1fe,0x9bdc06a7,0xc19bf174,
    0xe49b69c1,0xefbe4786,0x0fc19dc6,0x240ca1cc,0x2de92c6f,0x4a7484aa,0x5cb0a9dc,0x76f988da,
    0x983e5152,0xa831c66d,0xb00327c8,0xbf597fc7,0xc6e00bf3,0xd5a79147,0x06ca6351,0x14292967,
    0x27b70a85,0x2e1b2138,0x4d2c6dfc,0x53380d13,0x650a7354,0x766a0abb,0x81c2c92e,0x92722c85,
    0xa2bfe8a1,0xa81a664b,0xc24b8b70,0xc76c51a3,0xd192e819,0xd6990624,0xf40e3585,0x106aa070,
    0x19a4c116,0x1e376c08,0x2748774c,0x34b0bcb5,0x391c0cb3,0x4ed8aa4a,0x5b9cca4f,0x682e6ff3,
    0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2
};

ouchar SSTR[MAXL*MAXN];
ouchar HASH[SHA256_BLOCK_SIZE];
ouchar DATA[64];
uint DATALEN;
uint SSTRLEN;
uint BITLEN[2];
ouint STATE[8];

void sha256Init()
{  
    DATALEN = 0; 
    BITLEN[0] = 0; 
    BITLEN[1] = 0; 
    STATE[0] = 0x6a09e667;
    STATE[1] = 0xbb67ae85;
    STATE[2] = 0x3c6ef372;
    STATE[3] = 0xa54ff53a;
    STATE[4] = 0x510e527f;
    STATE[5] = 0x9b05688c;
    STATE[6] = 0x1f83d9ab;
    STATE[7] = 0x5be0cd19;
}

void sha256Transform() {  
    ouint a, b, c, d, e, f, g, h;
    ouint t1, t2, m[64];
    uint i, j;
      
    for (i = 0, j = 0; i < 16; i++, j += 4)
        m[i] = (DATA[j] << 24) | (DATA[j+1] << 16) | (DATA[j+2] << 8) | (DATA[j+3]);
    for ( ; i < 64; i++)
        m[i] = SIG1(m[i-2]) + m[i-7] + SIG0(m[i-15]) + m[i-16];

    a = STATE[0];
    b = STATE[1];
    c = STATE[2];
    d = STATE[3];
    e = STATE[4];
    f = STATE[5];
    g = STATE[6];
    h = STATE[7];

    for (i = 0; i < 64; i++) {
        t1 = h + EP1(e) + CH(e,f,g) + k[i] + m[i];
        t2 = EP0(a) + MAJ(a,b,c);
        h = g;
        g = f;
        f = e;
        e = d + t1;
        d = c;
        c = b;
        b = a;
        a = t1 + t2;
    }

    STATE[0] += a;
    STATE[1] += b;
    STATE[2] += c;
    STATE[3] += d;
    STATE[4] += e;
    STATE[5] += f;
    STATE[6] += g;
    STATE[7] += h;
}  

void sha256Update()
{
    uint i;
    for (i = 0; i < SSTRLEN; i++) { 
        DATA[DATALEN++] = SSTR[i];
        if (DATALEN == 64) { 
            sha256Transform();
            DBL_INT_ADD(BITLEN[0], BITLEN[1], 512); 
            DATALEN = 0; 
        }  
    }
}

void sha256Final()
{  
    uint i2, i = DATALEN;

    if (DATALEN < 56) { 
        DATA[i++] = 0x80; 
        while (i < 56) {
            DATA[i++] = 0x00; 
        }
    }  
    else { 
        DATA[i++] = 0x80; 
        while (i < 64) {
            DATA[i++] = 0x00;
        }
        sha256Transform();
        
        for (i2 = 0; i2 < 56; i2++) {
            DATA[i2] = 0;
        }
    }  

    DBL_INT_ADD(BITLEN[0], BITLEN[1], DATALEN * 8);
    DATA[63] = BITLEN[0]; 
    DATA[62] = BITLEN[0] >> 8; 
    DATA[61] = BITLEN[0] >> 16; 
    DATA[60] = BITLEN[0] >> 24; 
    DATA[59] = BITLEN[1]; 
    DATA[58] = BITLEN[1] >> 8; 
    DATA[57] = BITLEN[1] >> 16;  
    DATA[56] = BITLEN[1] >> 24; 
    sha256Transform();

    for (i = 0; i < 4; i++) { 
        HASH[i]    = (STATE[0] >> (24-i*8)) & 0x000000ff; 
        HASH[i+4]  = (STATE[1] >> (24-i*8)) & 0x000000ff; 
        HASH[i+8]  = (STATE[2] >> (24-i*8)) & 0x000000ff;
        HASH[i+12] = (STATE[3] >> (24-i*8)) & 0x000000ff;
        HASH[i+16] = (STATE[4] >> (24-i*8)) & 0x000000ff;
        HASH[i+20] = (STATE[5] >> (24-i*8)) & 0x000000ff;
        HASH[i+24] = (STATE[6] >> (24-i*8)) & 0x000000ff;
        HASH[i+28] = (STATE[7] >> (24-i*8)) & 0x000000ff;
    }  
}

void sha256(void *args) {
    protocolIO *io = args;
    int i, j, n1, n2, index = 0;
    
    n1 = ocBroadcastInt(io->n, 1);
    n2 = ocBroadcastInt(io->n, 2);
        
    for (i = 0; i < n1 && i < n2; i++) {
        for (j = 0; j < ocBroadcastInt(io->lens[i], 1); j++) {
            SSTR[index++] = feedOblivChar(io->lines[i][j], 1);
        }
        for (j = 0; j < ocBroadcastInt(io->lens[i], 2); j++) {
            SSTR[index++] = feedOblivChar(io->lines[i][j], 2);
        }
    }
    
    int i2 = i;
    
    for (i = i2; i < n1; i++) {
        for (j = 0; j < ocBroadcastInt(io->lens[i], 1); j++) {
            SSTR[index++] = feedOblivChar(io->lines[i][j], 1);
        }
    }
    for (i = i2; i < n2; i++) {
        for (j = 0; j < ocBroadcastInt(io->lens[i], 2); j++) {
            SSTR[index++] = feedOblivChar(io->lines[i][j], 2);
        }
    }
    
    SSTRLEN = index;
    
    sha256Init();    
    sha256Update();
    sha256Final();
    
    for (i = 0; i < SHA256_BLOCK_SIZE; i++) {
        revealOblivChar(&io->res[i], HASH[i], 0);
    }
    
    fprintf(stderr,"Yao gate count: %u\n", yaoGateCount());
}
