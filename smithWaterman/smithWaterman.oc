#include <stdio.h>
#include <obliv.oh>

#include "smithWaterman.h"

obliv int scores[MAXN][MAXN];
obliv int directions[MAXN][MAXN];

void readString(obliv char* dest, int n, const char* src, int party)
{
    int i;
    for (i = 0; i < n; i++) {
        dest[i] = feedOblivChar(src[i], party);
    }
}

obliv int similarity(obliv char a, obliv char b) {
    return (a == b) * 3 - 1;
}

obliv int deletion(int row, int col) {
    obliv int curr, cond, currMax = 0;
    int r;
    for (r = 0; r < row; r++) {
        curr = scores[r][col] - 1;
        obliv if (currMax < curr) {
            currMax = curr;
        }
    }
    return currMax;
}

obliv int insertion(int row, int col) {
    obliv int curr, cond, currMax = 0;
    int c;
    for (c = 0; c < col; c++) {
        curr = scores[row][c] - 1;
        obliv if (currMax < curr) {
            currMax = curr;
        }
    }
    return currMax;
}

void smithWaterman(void* args)
{
    protocolIO *io = args;
    int rows, cols, r, c, pointer, index;
    obliv int score, dir, sim, del, ins, cond;
    obliv char horzDna[MAXN], vertDna[MAXN];

    cols = ocBroadcastInt(io->n, 1);
    rows = ocBroadcastInt(io->n, 2);

    readString(horzDna, rows, io->s, 1);
    readString(vertDna, cols, io->s, 2);
    
    rows += 1;
    cols += 1;
    
    for (r = 0; r < rows; r++) {
        scores[r][0] = 0;
        directions[r][0] = 0;
    }
            
    for (c = 0; c < cols; c++) {
        scores[0][c] = 0;
        directions[0][c] = 0;
    }
    
    for (r = 1; r < rows; r++) {
        for (c = 1; c < cols; c++) {
            score = 0;
            dir = 0;
            
            sim = scores[r-1][c-1] + similarity(vertDna[r-1], horzDna[c-1]);
            del = deletion(r, c);
            ins = insertion(r, c);
            
            obliv if (score < sim) {
                dir = 1;
                score = sim;
            }
            obliv if (score < del) {
                dir = 2;
                score = del;
            }
            obliv if (score < ins) {
                dir = 3;
                score = ins;
            }
            
            scores[r][c] = score;
            directions[r][c] = dir;
        }
    }
    
    fprintf(stderr, "Finished computation.\n");
    
    r = rows - 1;
    c = cols - 1;
    index = 0;
    revealOblivInt(&pointer, directions[r][c], 0);
    
    while (pointer != 0) {
        if (pointer == 1) {
            r -= 1;
            c -= 1;
        }
        else if (pointer == 2) {
            r -= 1;
        }
        else {
            c -= 1;
        }
        
        io->res[index++] = (char) pointer + 64;
        revealOblivInt(&pointer, directions[r][c], 0);
    }
    
    io->res[index++] = '\0';
    
    fprintf(stderr,"Yao gate count: %u\n", yaoGateCount());
}
